ProgramEntry. Program ::= [Stm];

comment "//" ;
comment "/*" "*/" ;

rules Boolean ::= "true" | "false" ;

LiteralUnit. Literal ::= "(" ")" ;
rules Literal ::= Boolean | Integer | String ;

{- Available types -}
TyIdent.  Type ::= Ident ;
TyUnit.   Type ::= "(" ")" ;
TyBool.   Type ::= "bool" ;
TyInt.    Type ::= "int" ;
TyString. Type ::= "string" ;
TyFun.    Type ::= "Fn" "(" [Type] ")" "->" Type ;
separator Type "," ;

{- Statements -}
SFunc.     Stm ::= "fn" Ident "(" [FormalArg] ")" Block ;
SFuncRet.  Stm ::= "fn" Ident "(" [FormalArg] ")" "->" Type Block ;
SStruct.   Stm ::= "struct" Ident "{" [FormalArg] "}" ;
SLet.      Stm ::= "let" Ident "=" Exp ";" ;
SLetType.  Stm ::= "let" Ident ":" Type "=" Exp ";" ;
SBlockExp. Stm ::= BlockExp ; {- !!! These do NOT require semicolons, more below -}
SExp.      Stm ::= Exp ";" ;
_. Stm ::= Stm ";" ;
terminator Stm "" ;

{-
  Blocks are tricky! This rules introduces grammar ambiguity (and thus
  reduce/reduce conflicts). Blocks can both serve as lexical scopes and
  statements but they also are expressions (trailing expression is returned,
  unit value () otherwise), however they are NOT separated by a semicolon.
  Here, expression form is preferred - block exps will preferrably be parsed
  as a part of a compound expression (`Exp`), instead of a `Stmt Exp`, e.g.
  (i) { if true { 0 } else { 1 } + 2 } will be parsed as { Exp }
  (ii) { { || { 42 } } () } will be parsed as { Exp }, where we call the
  returned lambda function, and so on.
-}
rules Block ::= "{" [Stm] "}" | "{" [Stm] Exp "}" ;
EBlock.    BlockExp ::= Block ;
EIf.       BlockExp ::= "if" Exp Block ;
EIfElse.   BlockExp ::= "if" Exp Block "else" Block ;
EWhile.    BlockExp ::= "while" Exp Block ;
terminator BlockExp "" ;

{- Expressions -}
EAssign. Exp ::= Ident "=" Exp ;

EOr.    Exp1 ::= Exp1 "||"  Exp2 ;
EAnd.   Exp2 ::= Exp2 "&&"  Exp3 ;
EEq.    Exp3 ::= Exp3 "==" Exp4 ;
ENEq.   Exp3 ::= Exp3 "!=" Exp4 ;
ELess.  Exp3 ::= Exp3 "<"  Exp4 ;
ELEq.   Exp3 ::= Exp3 "<=" Exp4 ;
EGreat. Exp3 ::= Exp3 ">"  Exp4 ;
EGEq.   Exp3 ::= Exp3 ">=" Exp4 ;
EPlus.  Exp4 ::= Exp4 "+" Exp5 ;
EMinus. Exp4 ::= Exp4 "-" Exp5 ;
EMul.   Exp5 ::= Exp5 "*" Exp6 ;
EDiv.   Exp5 ::= Exp5 "/" Exp6 ;
ENot.   Exp6 ::= "!" Exp7 ;
ENeg.   Exp6 ::= "-" Exp7 ;

ELit.      Exp7 ::= Literal ;
{- EIdent and EStruct introduce shift/reduce conflict - we (rightfully) always
   prefer EStruct rule -}
EIdent.    Exp7 ::= Ident ;
EStruct.   Exp7 ::= Ident "{" [MemberInit] "}" ;
ECall.     Exp7 ::= Exp7 "(" [Exp] ")" ;
EPrint.    Exp7 ::= "print" "(" Exp ")" ;
EField.    Exp7 ::= Exp7 "." Ident ;
EBlockExp. Exp7 ::= BlockExp ;
EAnonFun.  Exp7 ::= AnonFunc ;

internal ETyped. Exp7 ::= "(" Exp ":" Type ")" ;

coercions Exp 7 ;
separator Exp "," ;

{- NB: AnonArgs rule doesn't parse || {} as empty FormalArgs -}
AnonEmpty. AnonFunc ::= "||" Block ;
AnonArgs. AnonFunc ::= "|" [FormalArg] "|" Block ;

{- Helper rules -}
MemberExp. MemberInit ::= Ident ":" Exp ;
separator MemberInit "," ;

TypedIdent. FormalArg ::= Ident ":" Type ;
separator FormalArg "," ;

