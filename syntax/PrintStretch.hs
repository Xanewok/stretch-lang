{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintStretch where

-- pretty-printer generated by the BNF converter

import AbsStretch
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
    Program1 items -> prPrec i 0 (concatD [prt 0 items])

instance Print Item where
  prt i e = case e of
    ItemStm stm -> prPrec i 0 (concatD [prt 0 stm])
    ItemDecl decl -> prPrec i 0 (concatD [prt 0 decl])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Stm where
  prt i e = case e of
    SLet id exp -> prPrec i 0 (concatD [doc (showString "let"), prt 0 id, doc (showString "="), prt 0 exp, doc (showString ";")])
    SLetType id type_ exp -> prPrec i 0 (concatD [doc (showString "let"), prt 0 id, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 exp, doc (showString ";")])
    SDrop id -> prPrec i 0 (concatD [doc (showString "drop"), prt 0 id, doc (showString ";")])
    SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Boolean where
  prt i e = case e of
    Boolean_true -> prPrec i 0 (concatD [doc (showString "true")])
    Boolean_false -> prPrec i 0 (concatD [doc (showString "false")])

instance Print Literal where
  prt i e = case e of
    LiteralInteger n -> prPrec i 0 (concatD [prt 0 n])
    LiteralString str -> prPrec i 0 (concatD [prt 0 str])
    LiteralBoolean boolean -> prPrec i 0 (concatD [prt 0 boolean])
    Literal1 -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])

instance Print BExp where
  prt i e = case e of
    BExp11 bexp1 bexp2 -> prPrec i 1 (concatD [prt 1 bexp1, doc (showString "=="), prt 2 bexp2])
    BExp12 bexp1 bexp2 -> prPrec i 1 (concatD [prt 1 bexp1, doc (showString "!="), prt 2 bexp2])
    BExp21 bexp1 bexp2 -> prPrec i 2 (concatD [prt 2 bexp1, doc (showString "<"), prt 3 bexp2])
    BExp22 bexp1 bexp2 -> prPrec i 2 (concatD [prt 2 bexp1, doc (showString "<="), prt 3 bexp2])
    BExp23 bexp1 bexp2 -> prPrec i 2 (concatD [prt 2 bexp1, doc (showString ">"), prt 3 bexp2])
    BExp24 bexp1 bexp2 -> prPrec i 2 (concatD [prt 2 bexp1, doc (showString ">="), prt 3 bexp2])
    BExp31 bexp -> prPrec i 3 (concatD [doc (showString "!"), prt 3 bexp])
    BExp4AExp aexp -> prPrec i 4 (concatD [prt 0 aexp])

instance Print AExp where
  prt i e = case e of
    AExp11 aexp1 aexp2 -> prPrec i 1 (concatD [prt 1 aexp1, doc (showString "+"), prt 2 aexp2])
    AExp12 aexp1 aexp2 -> prPrec i 1 (concatD [prt 1 aexp1, doc (showString "-"), prt 2 aexp2])
    AExp21 aexp1 aexp2 -> prPrec i 2 (concatD [prt 2 aexp1, doc (showString "*"), prt 3 aexp2])
    AExp22 aexp1 aexp2 -> prPrec i 2 (concatD [prt 2 aexp1, doc (showString "/"), prt 3 aexp2])
    AExp31 aexp -> prPrec i 3 (concatD [doc (showString "-"), prt 3 aexp])
    AExp4Exp exp -> prPrec i 4 (concatD [prt 0 exp])

instance Print Exp where
  prt i e = case e of
    ELit literal -> prPrec i 0 (concatD [prt 0 literal])
    EIdent id -> prPrec i 0 (concatD [prt 0 id])
    ECall exp actualargs -> prPrec i 0 (concatD [prt 0 exp, doc (showString "("), prt 0 actualargs, doc (showString ")")])
    ECallPrint actualarg -> prPrec i 0 (concatD [doc (showString "print"), doc (showString "("), prt 0 actualarg, doc (showString ")")])
    EField exp id -> prPrec i 0 (concatD [prt 0 exp, doc (showString "."), prt 0 id])
    EStruct id memberinits -> prPrec i 0 (concatD [prt 0 id, doc (showString "{"), prt 0 memberinits, doc (showString "}")])
    EAssign exp bexp -> prPrec i 0 (concatD [prt 0 exp, doc (showString "="), prt 0 bexp])
    EIf bexp block -> prPrec i 0 (concatD [doc (showString "if"), prt 0 bexp, prt 0 block])
    EIfElse bexp block1 block2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 bexp, prt 0 block1, doc (showString "else"), prt 0 block2])
    EWhile bexp block -> prPrec i 0 (concatD [doc (showString "while"), prt 0 bexp, prt 0 block])
    EBlock block -> prPrec i 0 (concatD [prt 0 block])
    EAnonFunc formalargs block -> prPrec i 0 (concatD [doc (showString "|"), prt 0 formalargs, doc (showString "|"), prt 0 block])

instance Print MemberInit where
  prt i e = case e of
    MemberInit id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 exp])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print ActualArg where
  prt i e = case e of
    ActualArg exp -> prPrec i 0 (concatD [prt 0 exp])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print FormalArg where
  prt i e = case e of
    FormalArg id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Block where
  prt i e = case e of
    Block1 items -> prPrec i 0 (concatD [doc (showString "{"), prt 0 items, doc (showString "}")])
    Block2 items bexp -> prPrec i 0 (concatD [doc (showString "{"), prt 0 items, prt 0 bexp, doc (showString "}")])

instance Print Type where
  prt i e = case e of
    TypeIdent id -> prPrec i 0 (concatD [prt 0 id])
    Type1 -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])
    Type_bool -> prPrec i 0 (concatD [doc (showString "bool")])
    Type_int -> prPrec i 0 (concatD [doc (showString "int")])
    Type_string -> prPrec i 0 (concatD [doc (showString "string")])
    Type2 types type_ -> prPrec i 0 (concatD [doc (showString "Fn"), doc (showString "("), prt 0 types, doc (showString ")"), doc (showString "->"), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Decl where
  prt i e = case e of
    DFunc id formalargs block -> prPrec i 0 (concatD [doc (showString "fn"), prt 0 id, doc (showString "("), prt 0 formalargs, doc (showString ")"), prt 0 block])
    DFuncRet id formalargs type_ block -> prPrec i 0 (concatD [doc (showString "fn"), prt 0 id, doc (showString "("), prt 0 formalargs, doc (showString ")"), doc (showString "->"), prt 0 type_, prt 0 block])
    DStruct id formalargs -> prPrec i 0 (concatD [doc (showString "struct"), prt 0 id, doc (showString "{"), prt 0 formalargs, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])

