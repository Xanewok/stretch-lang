

module AbsStretch where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program1 [Item]
  deriving (Eq, Ord, Show, Read)

data Item = ItemStm Stm | ItemDecl Decl
  deriving (Eq, Ord, Show, Read)

data Stm
    = SLet Ident Exp | SLetType Ident Type Exp | SDrop Ident | SExp Exp
  deriving (Eq, Ord, Show, Read)

data Boolean = Boolean_true | Boolean_false
  deriving (Eq, Ord, Show, Read)

data Literal
    = LiteralInteger Integer
    | LiteralString String
    | LiteralBoolean Boolean
    | Literal1
  deriving (Eq, Ord, Show, Read)

data BExp
    = BExp11 BExp BExp
    | BExp12 BExp BExp
    | BExp21 BExp BExp
    | BExp22 BExp BExp
    | BExp23 BExp BExp
    | BExp24 BExp BExp
    | BExp31 BExp
    | BExp4AExp AExp
  deriving (Eq, Ord, Show, Read)

data AExp
    = AExp11 AExp AExp
    | AExp12 AExp AExp
    | AExp21 AExp AExp
    | AExp22 AExp AExp
    | AExp31 AExp
    | AExp4Exp Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = ELit Literal
    | EIdent Ident
    | ECall Exp [ActualArg]
    | ECallPrint ActualArg
    | EField Exp Ident
    | EStruct Ident [MemberInit]
    | EAssign Exp BExp
    | EIf BExp Block
    | EIfElse BExp Block Block
    | EWhile BExp Block
    | EBlock Block
    | EAnonFunc [FormalArg] Block
  deriving (Eq, Ord, Show, Read)

data MemberInit = MemberInit Ident Exp
  deriving (Eq, Ord, Show, Read)

data ActualArg = ActualArg Exp
  deriving (Eq, Ord, Show, Read)

data FormalArg = FormalArg Ident Type
  deriving (Eq, Ord, Show, Read)

data Block = Block1 [Item] | Block2 [Item] BExp
  deriving (Eq, Ord, Show, Read)

data Type
    = TypeIdent Ident
    | Type1
    | Type_bool
    | Type_int
    | Type_string
    | Type2 [Type] Type
  deriving (Eq, Ord, Show, Read)

data Decl
    = DFunc Ident [FormalArg] Block
    | DFuncRet Ident [FormalArg] Type Block
    | DStruct Ident [FormalArg]
  deriving (Eq, Ord, Show, Read)

