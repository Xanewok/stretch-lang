{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
module AbsStretch where

-- Haskell module generated by the BNF converter


import Data.Data (Data,Typeable)
import GHC.Generics (Generic)
newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)
data Program = ProgramEntry [Stm]
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Boolean = Boolean_true | Boolean_false
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Literal
    = LiteralUnit
    | LiteralBoolean Boolean
    | LiteralInteger Integer
    | LiteralString String
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Type
    = TyIdent Ident
    | TyUnit
    | TyBool
    | TyInt
    | TyString
    | TyFun [Type] Type
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Stm
    = SFunc Ident [FormalArg] Block
    | SFuncRet Ident [FormalArg] Type Block
    | SStruct Ident [FormalArg]
    | SLet Ident Exp
    | SLetType Ident Type Exp
    | SBlockExp BlockExp
    | SExp Exp
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Block = Block1 [Stm] | Block2 [Stm] Exp
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data BlockExp
    = EBlock Block
    | EIf Exp Block
    | EIfElse Exp Block Block
    | EWhile Exp Block
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Exp
    = EAssign Ident Exp
    | EOr Exp Exp
    | EAnd Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | ELess Exp Exp
    | ELEq Exp Exp
    | EGreat Exp Exp
    | EGEq Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | ENot Exp
    | ENeg Exp
    | ELit Literal
    | EIdent Ident
    | EStruct Ident [MemberInit]
    | ECall Exp [Exp]
    | EPrint Exp
    | EField Exp Ident
    | EBlockExp BlockExp
    | EAnonFun AnonFunc
    | ETyped Exp Type
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data AnonFunc = AnonEmpty Block | AnonArgs [FormalArg] Block
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data MemberInit = MemberExp Ident Exp
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data FormalArg = TypedIdent Ident Type
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

