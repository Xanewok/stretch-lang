module SkelStretch where

-- Haskell module generated by the BNF converter

import AbsStretch
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Program1 items -> failure x
transItem :: Item -> Result
transItem x = case x of
  ItemStm stm -> failure x
  ItemDecl decl -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SLet ident exp -> failure x
  SLetType ident type_ exp -> failure x
  SDrop ident -> failure x
  SExp exp -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  Boolean_true -> failure x
  Boolean_false -> failure x
transLiteral :: Literal -> Result
transLiteral x = case x of
  LiteralInteger integer -> failure x
  LiteralString string -> failure x
  LiteralBoolean boolean -> failure x
  Literal1 -> failure x
transBExp :: BExp -> Result
transBExp x = case x of
  EqBExp bexp1 bexp2 -> failure x
  NEqBExp bexp1 bexp2 -> failure x
  LessBExp bexp1 bexp2 -> failure x
  LEqBExp bexp1 bexp2 -> failure x
  GreatBExp bexp1 bexp2 -> failure x
  GEqBExp bexp1 bexp2 -> failure x
  NotBExp bexp -> failure x
  ArithExp aexp -> failure x
transAExp :: AExp -> Result
transAExp x = case x of
  AddAExp aexp1 aexp2 -> failure x
  SubAExp aexp1 aexp2 -> failure x
  MulAExp aexp1 aexp2 -> failure x
  DivAExp aexp1 aexp2 -> failure x
  NegAExp aexp -> failure x
  GenAExp exp -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ELit literal -> failure x
  EIdent ident -> failure x
  ECall exp actualargs -> failure x
  ECallPrint actualarg -> failure x
  EField exp ident -> failure x
  EStruct ident memberinits -> failure x
  EAssign exp bexp -> failure x
  EIf bexp block -> failure x
  EIfElse bexp block1 block2 -> failure x
  EWhile bexp block -> failure x
  EBlock block -> failure x
  EAnonFunc formalargs block -> failure x
transMemberInit :: MemberInit -> Result
transMemberInit x = case x of
  MemberInit ident exp -> failure x
transActualArg :: ActualArg -> Result
transActualArg x = case x of
  ActualArg exp -> failure x
transFormalArg :: FormalArg -> Result
transFormalArg x = case x of
  FormalArg ident type_ -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  Block1 items -> failure x
  Block2 items bexp -> failure x
transType :: Type -> Result
transType x = case x of
  TypeIdent ident -> failure x
  Type1 -> failure x
  Type_bool -> failure x
  Type_int -> failure x
  Type_string -> failure x
  Type2 types type_ -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DFunc ident formalargs block -> failure x
  DFuncRet ident formalargs type_ block -> failure x
  DStruct ident formalargs -> failure x

