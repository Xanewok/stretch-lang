let lambda = || { print("it works!"); };
lambda();

fn defined() {
    print("This works, too!");
}

defined();

fn print_string(arg: string) {
    print(arg);
}

print_string("Passed argument");

let arg = 3;

fn returns_doubled(msg: string, arg: int) -> int {
    print(msg);
    arg * 2
}

let a = returns_doubled("Hello", 21);
print(a); // 42

let double_it = |x: int| { x * 2 };
print(double_it(33)); // 66

fn accepts_func(func: Fn() -> ()) {
    func();
}

accepts_func(defined); // "This works, too!"

fn accepts_lambda(lambda: Fn(int) -> int) {
    print(lambda(22));
}
accepts_lambda(double_it); // 44

fn return_countdown() -> Fn() -> int {
    let counter = 3;

    || {
        counter = counter - 1;
        counter
    }
}

let tick = return_countdown();
print(tick()); // 2
print(tick()); // 1
print(tick()); // 0

fn returns_nested() -> Fn(int) -> int {
    fn nested(arg: int) -> int {
        print(arg);
        42
    }

    let shadowed = nested;
    let nested = 3;

    shadowed
}

let func = returns_nested();
func(5);