{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module BNFC.PrintStretch where

-- pretty-printer generated by the BNF converter

import BNFC.AbsStretch
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
    ProgramEntry stms -> prPrec i 0 (concatD [prt 0 stms])

instance Print Boolean where
  prt i e = case e of
    Boolean_true -> prPrec i 0 (concatD [doc (showString "true")])
    Boolean_false -> prPrec i 0 (concatD [doc (showString "false")])

instance Print Literal where
  prt i e = case e of
    LiteralUnit -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])
    LiteralBoolean boolean -> prPrec i 0 (concatD [prt 0 boolean])
    LiteralInteger n -> prPrec i 0 (concatD [prt 0 n])
    LiteralString str -> prPrec i 0 (concatD [prt 0 str])

instance Print Type where
  prt i e = case e of
    TyIdent id -> prPrec i 0 (concatD [prt 0 id])
    TyUnit -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])
    TyBool -> prPrec i 0 (concatD [doc (showString "bool")])
    TyInt -> prPrec i 0 (concatD [doc (showString "int")])
    TyString -> prPrec i 0 (concatD [doc (showString "string")])
    TyFun types type_ -> prPrec i 0 (concatD [doc (showString "Fn"), doc (showString "("), prt 0 types, doc (showString ")"), doc (showString "->"), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Stm where
  prt i e = case e of
    SFunc id formalargs block -> prPrec i 0 (concatD [doc (showString "fn"), prt 0 id, doc (showString "("), prt 0 formalargs, doc (showString ")"), prt 0 block])
    SFuncRet id formalargs type_ block -> prPrec i 0 (concatD [doc (showString "fn"), prt 0 id, doc (showString "("), prt 0 formalargs, doc (showString ")"), doc (showString "->"), prt 0 type_, prt 0 block])
    SStruct id formalargs -> prPrec i 0 (concatD [doc (showString "struct"), prt 0 id, doc (showString "{"), prt 0 formalargs, doc (showString "}")])
    SLet id exp -> prPrec i 0 (concatD [doc (showString "let"), prt 0 id, doc (showString "="), prt 0 exp, doc (showString ";")])
    SLetType id type_ exp -> prPrec i 0 (concatD [doc (showString "let"), prt 0 id, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 exp, doc (showString ";")])
    SBlockExp blockexp -> prPrec i 0 (concatD [prt 0 blockexp])
    SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Block where
  prt i e = case e of
    Block1 stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])
    Block2 stms exp -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, prt 0 exp, doc (showString "}")])

instance Print BlockExp where
  prt i e = case e of
    EBlock block -> prPrec i 0 (concatD [prt 0 block])
    EIf exp block -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, prt 0 block])
    EIfElse exp block1 block2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, prt 0 block1, doc (showString "else"), prt 0 block2])
    EWhile exp block -> prPrec i 0 (concatD [doc (showString "while"), prt 0 exp, prt 0 block])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Exp where
  prt i e = case e of
    EAssign id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 exp])
    EOr exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "||"), prt 2 exp2])
    EAnd exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "&&"), prt 3 exp2])
    EEq exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "=="), prt 4 exp2])
    ENEq exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "!="), prt 4 exp2])
    ELess exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "<"), prt 4 exp2])
    ELEq exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "<="), prt 4 exp2])
    EGreat exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString ">"), prt 4 exp2])
    EGEq exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString ">="), prt 4 exp2])
    EPlus exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "+"), prt 5 exp2])
    EMinus exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "-"), prt 5 exp2])
    EMul exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "*"), prt 6 exp2])
    EDiv exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "/"), prt 6 exp2])
    ENot exp -> prPrec i 6 (concatD [doc (showString "!"), prt 7 exp])
    ENeg exp -> prPrec i 6 (concatD [doc (showString "-"), prt 7 exp])
    ELit literal -> prPrec i 7 (concatD [prt 0 literal])
    EIdent id -> prPrec i 7 (concatD [prt 0 id])
    EStruct id memberinits -> prPrec i 7 (concatD [prt 0 id, doc (showString "{"), prt 0 memberinits, doc (showString "}")])
    ECall exp exps -> prPrec i 7 (concatD [prt 7 exp, doc (showString "("), prt 0 exps, doc (showString ")")])
    EPrint exp -> prPrec i 7 (concatD [doc (showString "print"), doc (showString "("), prt 0 exp, doc (showString ")")])
    EField exp id -> prPrec i 7 (concatD [prt 7 exp, doc (showString "."), prt 0 id])
    EBlockExp blockexp -> prPrec i 7 (concatD [prt 0 blockexp])
    EAnonFun anonfunc -> prPrec i 7 (concatD [prt 0 anonfunc])
    ETyped exp type_ -> prPrec i 7 (concatD [doc (showString "("), prt 0 exp, doc (showString ":"), prt 0 type_, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print AnonFunc where
  prt i e = case e of
    AnonEmpty block -> prPrec i 0 (concatD [doc (showString "||"), prt 0 block])
    AnonArgs formalargs block -> prPrec i 0 (concatD [doc (showString "|"), prt 0 formalargs, doc (showString "|"), prt 0 block])

instance Print MemberInit where
  prt i e = case e of
    MemberExp id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 exp])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print FormalArg where
  prt i e = case e of
    TypedIdent id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

